document.addEventListener('DOMContentLoaded', () => {
  displayMatches(); // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ –º–∞—Ç—á–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  loadFightersAndTournaments(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–æ–π—Ü–æ–≤ –∏ —Ç—É—Ä–Ω–∏—Ä—ã

  // –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  document.querySelectorAll('[id^="edit-"]').forEach(button => {
    button.addEventListener('click', (e) => {
      const matchId = e.target.id.split('-')[1];
      editMatch(matchId);  // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    });
  });
});

document.getElementById('match-form').addEventListener('submit', addMatch);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–∞—Ç—á–∞
async function addMatch(event) {
  event.preventDefault();

  const fighterId = document.querySelector('[name="fighterId"]').value;
  const opponentId = document.querySelector('[name="opponentId"]').value;
  const tournamentId = document.querySelector('[name="tournamentId"]').value;
  const weightCategory = document.querySelector('[name="weightCategory"]').value;
  const matchDate = document.querySelector('[name="matchDate"]').value;
  const descriptionInput = document.querySelector('[name="description"]').value;
  const description = descriptionInput.trim() !== '' ? descriptionInput : '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è';

  const matchData = {
    fighterId,
    opponentId,
    tournamentId,
    date: matchDate,
    result: '',
    method: '',
    event_name: '–ù–µ —É–∫–∞–∑–∞–Ω',
    description
  };

  try {
    const response = await fetch('/api/matches', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(matchData)
    });

    const data = await response.json();
    if (response.ok) {
      alert('–ú–∞—Ç—á —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
      displayMatches(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π
    } else {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ç—á–∞');
      console.error(data.message);
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ç—á–∞:', err);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ç—á–∞');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –º–∞—Ç—á–µ–π
async function displayMatches() {
  const matchesContainer = document.getElementById('matches-list');
  matchesContainer.innerHTML = ''; // –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º

  try {
    const response = await fetch('/api/matches');
    const matches = await response.json();

    if (response.ok) {
      matches.forEach(match => {
        const matchElement = document.createElement('div');
        matchElement.classList.add('match-item');
        matchElement.innerHTML = `
          <p>–¢—É—Ä–Ω–∏—Ä: ${match.Tournament?.name || '–ë–µ–∑ —Ç—É—Ä–Ω–∏—Ä–∞'}</p>
          <p>–ë–æ–µ—Ü: ${match.Fighter?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'} vs ${match.Opponent?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}</p>
          <p>–î–∞—Ç–∞: ${new Date(match.date).toLocaleString()}</p>
          <button class="btn btn-secondary edit-btn" data-id="${match.id}">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
          <button class="btn btn-danger" onclick="deleteMatch(${match.id})">–£–¥–∞–ª–∏—Ç—å</button>
        `;
        matchesContainer.appendChild(matchElement);
      });

      // üëá –î–û–ë–ê–í–õ–Ø–ï–ú –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ù–ê –ö–ù–û–ü–ö–ò "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" –ü–û–°–õ–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø
      document.querySelectorAll('.edit-btn').forEach(button => {
        button.addEventListener('click', (e) => {
          const matchId = e.target.dataset.id;
          editMatch(matchId);
        });
      });

    } else {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ç—á–µ–π');
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ç—á–µ–π:', err);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ç—á–µ–π');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–π—Ü–æ–≤ –∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤
async function loadFightersAndTournaments() {
  try {
    const [fightersRes, tournamentsRes] = await Promise.all([
      fetch('/api/fighters'),
      fetch('/api/tournaments')
    ]);

    const fighters = await fightersRes.json();
    const tournaments = await tournamentsRes.json();

    if (fightersRes.ok) {
      const fighterSelect = document.querySelector('[name="fighterId"]');
      const opponentSelect = document.querySelector('[name="opponentId"]');

      fighters.forEach(fighter => {
        const option = document.createElement('option');
        option.value = fighter.id;
        option.textContent = fighter.name;
        fighterSelect.appendChild(option);

        const opponentOption = document.createElement('option');
        opponentOption.value = fighter.id;
        opponentOption.textContent = fighter.name;
        opponentSelect.appendChild(opponentOption);
      });
    }

    if (tournamentsRes.ok) {
      const tournamentSelect = document.querySelector('[name="tournamentId"]');
      tournaments.forEach(tournament => {
        const option = document.createElement('option');
        option.value = tournament.id;
        option.textContent = tournament.name;
        tournamentSelect.appendChild(option);
      });
    }

  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–æ–π—Ü–æ–≤ –∏–ª–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤:', err);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–æ–π—Ü–æ–≤ –∏–ª–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ç—á–∞
async function editMatch(id) {
  try {
    const response = await fetch(`/api/matches/${id}`);
    const match = await response.json();

    if (response.ok) {
      document.querySelector('[name="fighterId"]').value = match.Fighter.id;
      document.querySelector('[name="opponentId"]').value = match.Opponent.id;
      document.querySelector('[name="tournamentId"]').value = match.Tournament.id;
      document.querySelector('[name="weightCategory"]').value = match.weightCategory || '';
      document.querySelector('[name="matchDate"]').value = match.date;
      document.querySelector('[name="description"]').value = match.description;

      const form = document.getElementById('match-form');
      form.removeEventListener('submit', addMatch);
      form.addEventListener('submit', (event) => updateMatch(event, id));
    } else {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç—á–∞');
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç—á–∞:', err);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç—á–∞');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ç—á–∞
async function updateMatch(event, id) {
  event.preventDefault();

  const fighterId = document.querySelector('[name="fighterId"]').value;
  const opponentId = document.querySelector('[name="opponentId"]').value;
  const tournamentId = document.querySelector('[name="tournamentId"]').value;
  const weightCategory = document.querySelector('[name="weightCategory"]').value;
  const matchDate = document.querySelector('[name="matchDate"]').value;
  const descriptionInput = document.querySelector('[name="description"]').value;
  const description = descriptionInput.trim() !== '' ? descriptionInput : '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è';

  const matchData = {
    fighterId,
    opponentId,
    tournamentId,
    date: matchDate,
    result: '',
    method: '',
    event_name: '–ù–µ —É–∫–∞–∑–∞–Ω',
    description
  };

  try {
    const response = await fetch(`/api/matches/${id}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(matchData)
    });

    const data = await response.json();
    if (response.ok) {
      alert('–ú–∞—Ç—á —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
      displayMatches();
    } else {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–∞—Ç—á–∞');
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–∞—Ç—á–∞:', err);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–∞—Ç—á–∞');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ç—á–∞
async function deleteMatch(id) {
  if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –º–∞—Ç—á?')) {
    try {
      const response = await fetch(`/api/matches/${id}`, {
        method: 'DELETE'
      });

      const data = await response.json();
      if (response.ok) {
        alert('–ú–∞—Ç—á —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');
        displayMatches();
      } else {
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Ç—á–∞');
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Ç—á–∞:', err);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Ç—á–∞');
    }
  }
}
